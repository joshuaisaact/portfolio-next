````mdx
### Teaching an AI Dog New Tricks (The Gemini Integration)

After getting my database sorted, it was time for the fun part - making Wooster actually... work. This meant integrating Google's Gemini API, which is like ChatGPT's slightly more reasonable cousin who actually RSVPs to events. And by reasonable, I just mean it has a generous free API tier.

<Figure
  src="/images/blog/ai-trip/gemini-convo.jpg"
  alt="A chat conversation with increasingly bizarre travel suggestions"
  title="Early testing conversations with Wooster went... interestingly"
/>

## The Art of Prompt Engineering (Or: How I Learned to Stop Worrying and Trust the AI)

First attempt at prompting Gemini:

```typescript
const prompt = "Plan a nice trip";
```
````

Result: _"Have you considered going somewhere? Perhaps doing things when you get there? Maybe eating food?"_

Right. Maybe we need to be a bit more specific.

## Take Two: Adding Structure

```typescript
interface TripRequest {
  destination: string;
  duration: number;
  budget: string;
  interests: string[];
  travelStyle:
    | "relaxed"
    | "adventurous"
    | "cultural"
    | "please just keep me alive";
}

const betterPrompt = `
  As a helpful golden retriever named Wooster, please plan a ${tripRequest.duration} day trip to ${tripRequest.destination}.
  The traveler enjoys ${tripRequest.interests.join(", ")} and prefers a ${tripRequest.travelStyle} travel style.
  Their budget is ${tripRequest.budget}.

  Please provide:
  1. Daily itinerary
  2. Local tips (especially about treats and belly rubs)
  3. Budget breakdown
  4. Safety considerations
`;
```

Much better! Although we did have to remove a section where Wooster kept suggesting fire hydrant tours...

## The Actual Implementation

Here's how we actually got Wooster working:

```typescript
import { GoogleGenerativeAI } from "@google/generative-ai";

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-pro" });

async function generateTrip(tripRequest: TripRequest) {
  try {
    const prompt = buildPrompt(tripRequest); // Our carefully crafted prompt

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();

    // Parse the response into our trip format
    const parsedTrip = parseGeminiResponse(text);

    // Save to database (assuming Wooster didn't just suggest chasing squirrels)
    return await saveTripToDatabase(parsedTrip);
  } catch (error) {
    console.error("Wooster got distracted by a tennis ball:", error);
    throw new Error("Failed to generate trip");
  }
}
```

## Handling Response Parsing (The Fun Part)

The trickiest bit was getting Gemini to return consistently structured data. Here's what worked:

```typescript
const betterPromptWithStructure = `
  ${basePrompt}

  Please format your response in the following JSON structure:
  {
    "dailyItinerary": [
      {
        "day": number,
        "activities": [
          {
            "time": string,
            "activity": string,
            "location": string,
            "notes": string
          }
        ]
      }
    ],
    "budgetBreakdown": {
      "accommodation": number,
      "activities": number,
      "food": number,
      "transportation": number,
      "treats": number // Wooster insisted on this category
    },
    "localTips": string[],
    "safetyConcerns": string[]
  }
`;
```

<Figure
  src="/images/blog/ai-trip/json-reality.jpg"
  alt="What you expect vs what you get meme with JSON"
  title="JSON Expectations vs Reality"
/>

## What I Learned

1. AI models are like dogs - they need clear, consistent instructions
2. Always validate responses (Wooster occasionally tries to sneak in extra park visits)
3. Error handling is crucial (especially when your AI assistant gets excited about squirrels)
4. Rate limiting is important (Wooster can get a bit... overenthusiastic)

Next up: the frontend implementation, or as I like to call it, "Making Wooster Look Presentable for Company".

```

Images needed:
1. `gemini-convo.jpg` - A funny mock chat conversation
2. `json-reality.jpg` - "What I expected vs What I got" meme with JSON
3. Maybe a golden retriever looking at code?

The technical details are there but wrapped in:
1. Dog-themed analogies
2. Actual implementation code
3. Real examples of prompts
4. Error handling considerations
5. Response parsing strategies

Want me to add:
1. More error handling examples?
2. Rate limiting implementation?
3. Different prompt strategies?
```
